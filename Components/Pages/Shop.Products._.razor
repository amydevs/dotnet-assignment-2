@page "/shop/products/{Slug}"
@rendermode InteractiveServer
@using PetShop.Components.Layout.UI
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ShopContext> DbFactory

<main class="space-y-8">
    <section class="auto-limit-w px-4 flex flex-col gap-8 md:flex-row md:justify-between">
        <div class="flex-1">
            <img class="h-auto w-full min-w-80" src="/images/products/@(Product.Id).png" />
        </div>
        <div class="flex flex-col justify-center gap-8 lg:max-w-xl">
            <div>
                <h2 class="font-semibold text-3xl">
                    @Product.Name
                </h2>
                <p>
                    $@(Product.Price / 100.0)
                </p>
            </div>
            <div class="grid grid-cols-2 grid-rows-2 gap-8">
                <Button @onclick="AddToCart" class="bg-primary text-primary-foreground col-span-2">
                    Add to Cart
                </Button>
                <Button class="border border-input bg-background">
                    Add to Wishlist
                </Button>
                <Button class="border border-input bg-background">
                    Share
                </Button>
            </div>
        </div>
    </section>
    <section class="auto-limit-w py-8 px-4 border-t border-t-border">
        <h3 class="font-semibold">
            Description
        </h3>
        <p>
            @Product.Description
        </p>
    </section>
</main>

@code {
    [Parameter]
    public string Slug { get; set; }

    Product Product { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        Product = (await context.Products.FindAsync([int.Parse(Slug)]))!;
        // context is disposed, tracking is lost
    }

    private async Task AddToCart()
    {
        var context = await DbFactory.CreateDbContextAsync();
        try
        {
            var cartProduct = context.CartProducts.First(e => e.ProductId == Product.Id);
            cartProduct.Quantity += 1;
        }
        catch
        {
            var cartProduct = new CartProduct
            {
                ProductId = Product.Id,
                Quantity = 1,
            };
            await context.CartProducts.AddAsync(cartProduct);
        }
        
        await context.SaveChangesAsync();
        // context is disposed, tracking is lost
    }
}