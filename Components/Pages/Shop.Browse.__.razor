@page "/shop/browse/{*Slug}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using PetShop.Components.UI
@using PetShop.Components.UI.Card
@inject IDbContextFactory<ShopContext> DbFactory

<main>
    <section class="auto-limit-w flex gap-3">
        <Button />
    </section>
    <section class="auto-limit-w grid grid-cols-[repeat(auto-fill,20rem)] gap-3 justify-center">
        @foreach (var product in Products)
        {
            <NavLink href=@ProductToHref(product)>
                <Card class="h-full">
                    <CardHeader/>
                    <CardContent>
                        <img src="/images/products/@(product.Id).png"/>
                    </CardContent>
                    <CardHeader>
                        <CardTitle>@product.Name</CardTitle>
                        <CardDescription>$@(product.Price / 100.0)</CardDescription>
                    </CardHeader>
                </Card>
            </NavLink>
        }
    </section>
</main>

@code {
    [Parameter]
    public string? Slug { get; set; }
    
    ProductCategory[] ProductCategories { get; set; }
    Product[] Products { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var context = DbFactory.CreateDbContext();
        ProductCategories = await context.ProductCategories.ToArrayAsync();
        Products = Slug == null ? await context.Products.ToArrayAsync() : await context.Products.Where((e) => e.ProductCategory.Id == int.Parse(Slug)).ToArrayAsync();
    }

    private string ProductCategoryToHref(ProductCategory productCategory)
    {
        return $"/shop/browse/{productCategory.Id}";
    }

    private string ProductToHref(Product product)
    {
        return $"/shop/product/{product.Id}";
    }
}